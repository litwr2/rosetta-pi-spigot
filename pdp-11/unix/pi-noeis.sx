/for PDP-11 2.11BSD/Unix7 as
/it calculates pi-number using the next C-algorithm
/https://crypto.stanford.edu/pbc/notes/pi/code.html
/#include <stdio.h>
/#define N 2800
/main() {
/   long r[N + 1], i, k, b, c;
/   c = 0;
/   for (i = 1; i <= N; i++)   ;it is the fixed line!, the original was (i = 0; i < N; ...
/      r[i] = 2000;
/   for (k = N; k > 0; k -= 14) {
/      d = 0;
/      i = k;
/      for(;;) {
/         d += r[i]*10000;
/         b = i*2 - 1;
/         r[i] = d%b;
/         d /= b;
/         i--;
/         if (i == 0) break;
/         d *= i;
/      }
/      printf("%.4d", (int)(c + d/10000));
/      c = d%10000;
/   }
/}

/the time of the calculation is quadratic, so if T is time to calculate N digits
/then 4*T is required to calculate 2*N digits
/main loop count is 7*(4+D)*D/16, D - number of digits

/litwr has written this for PDP-11/Unix
/tricky provided some help
/MMS gave some support
/Thorham and meynaf helped a lot

#define IO
/#define BSD

#ifdef BSD
.globl _pistart, _ra, _N, _ver, csv, _write
#else
.globl _pistart, _ra, _N, _ver
#endif

kv = kvs + 2

_pistart:
#ifdef BSD
         jsr r5,csv
#endif
         mov r5,-(sp)  /this is required for Unix system 7
         mov *$_N,r0
         mov r0,*$kv
         tst -(sp)       /create a location for high(d)
         mov *$_ra,r2
         dec r2
         mov r2,*$m6+2
         dec r2
         mov r2,*$m5+2
         inc r2
         inc r2
         mov $2000.,r1     /fill r-array
m1:      mov r1,(r2)+
         sob r0,m1

         /clr *$cv
mloop:   clr r5       /d <- 0
         clr *sp
kvs:     mov $0,r1
         asl r1       /i <- 2k
m5:      mov 2(r1),r0      /r[i]
         clr r4            /r[i]*10000
         clr r2
         mov r0,r3         /the result in r2 - high, r3 - low
         asl r3
         rol r2
         asl r3
         rol r2
         asl r3
         rol r2
         sub r3,r0
         sbc r4
         sub r2,r4
         asl r3
         rol r2
         sub r3,r0
         sbc r4
         sub r2,r4
         sub r3,r0
         sbc r4
         sub r2,r4
         swab r0
         swab r4
         clrb r4
         bisb r0,r4
         clrb r0
         sub r0,r3
         sbc r2
         sub r4,r2

         add r3,r5
         mov r5,r3
         adc r2
         add *sp,r2   /sets CF=0
         mov r2,*sp
         dec r1          /b <- 2*i-1, CF=0 for EIS!

                /R4:R3 = R2:R3/R1, R2 = R2:R3%R1, used: R0, R2, R3, R4
         cmp r2,r1
         bcc div32

     .rept 16
     div0
     .endm
        clr r4
        jmp *$exitdiv

div32:
     mov r3,r0

     .rept 5
     asl r2
     .endm

     mov r2,r3
     clr r2

     .rept 11
     div0
     .endm

     mov r3,r4
     mov r0,r3

     .rept 16
     div0
     .endm
exitdiv:         /end of division

m6:      mov r2,1(r1)      /r[i] <- d%b
         dec r1        /i <- i - 1
         beq m77

         add r3,r2       /d <- d/b*i
         adc r4
         mov *sp,r3
         sub r2,r5
         sbc r3
         sub r4,r3
         ror r3
         ror r5
         mov r3,*sp
         jmp *$m5

m77:
#ifdef IO
         mov r3,r2
         mov r4,r3
         mov $10000.,r1
         jsr pc,*$div32x16s
         add *$cv,r2  /c + d/10000
         mov r3,*$cv     /c <- d%10000
         jsr pc,*$PR0000
#ifdef BSD
	 mov $4,-(sp)
	 mov $buf4,-(sp)
	 mov $1,-(sp)
	 jsr pc,*$_write
	 add $6,sp
#else
         mov $1,r0
         sys 4;buf4;4    /write=4
#endif
#endif
         sub $14.,*$kv      /k <- k - 14
         beq m78
         jmp *$mloop

m78:     tst (sp)+       /clear the location for high(d)
         mov (sp)+,r5
         rts pc

div32x16s: /R1:R2 = R3:R2/R1, R3 = R3:R2%R1, used: R0,R4
     cmp r3,r1
     bcc 5f

     jsr pc,*$3f
     clr r1
     rts pc

5:   mov r2,r0
     mov r3,r2
     clr r3
     jsr pc,*$3f
     mov r2,r4
     mov r0,r2
     jsr pc,*$3f
     mov r4,r1
     rts pc

3:   jsr pc,*$.+4
     jsr pc,*$.+4
     jsr pc,*$.+4
     jsr pc,*$.+4
     asl r2
     rol r3
     bcs 4f    /for R1>$7fff

     cmp r3,r1
     bcs 2f

4:   sub r1,r3
     inc r2
2:   rts pc

PR0000: mov $buf4,r1
        mov $1000.,r3   /prints r2
	jsr pc,*$PRZ
        mov $100.,r3
	jsr pc,*$PRZ
        mov $10.,r3
	jsr pc,*$PRZ
	mov r2,r0
PR:	add $48.,r0
  	movb r0,(r1)+
        rts pc

PRZ:	mov $65535.,r0
l0:	inc r0
	cmp r2,r3
	bcs PR

	sub r3,r2
	br l0

.data   /rather not required
buf4:   .byte 0,0,0,0
cv:     .byte 0,0
_ver:   .byte "7","(","N","O","E","I","S",")",0

