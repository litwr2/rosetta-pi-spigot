;for pasmo assembler with the 8085 preprocessor
;it calculates pi-number using the next C-algorithm
;https://crypto.stanford.edu/pbc/notes/pi/code.html

;#include <stdio.h>
;#define N 2800
;main() {
;   long r[N + 1], i, k, b, c;
;   c = 0;
;   for (i = 1; i <= N; i++)   ;it is the fixed line!, the original was (i = 0; i < N; ...
;      r[i] = 2000;
;   for (k = N; k > 0; k -= 14) {
;      d = 0;
;      i = k;
;      for(;;) {
;         d += r[i]*10000;
;         b = i*2 - 1;
;         r[i] = d%b;
;         d /= b;
;         i--;
;         if (i == 0) break;
;         d *= i;
;      }
;      printf("%.4d", (int)(c + d/10000));
;      c = d%10000;
;   }
;}

;the time of the calculation is quadratic, so if T is time to calculate N digits
;then 4*T is required to calculate 2*N digits
;main loop count is 7*(4+D)*D/16, D - number of digits

;the fast 32/16-bit division was made by Ivagor for the z80, 8080
;litwr made the spigot for the Tandy TRS-80 model 100
;tricky provided some help
;MMS gave some support
;Thorham and meynaf helped too

DIGITS equ 100
;N equ 3500   ;1000 digits
N equ   DIGITS*7/2
SA equ $8d00 ;start address
OPT equ 5    ;it's a constant for the pi-spigot
IO equ 1

include "8085-div.s"

         org SA-6
         dw SA
         dw ra - start
         dw SA

start    proc
         local lf0,loop,l4,loop2,m1
    ld hl,TINTR
    ld (0f600h),hl
    ld a,0c3h       ;JP
    ld (0f5ffh),a
    ld hl,0
    ld (time),hl
    ld (time+2),hl

         ld bc,N        ;fill r-array
         ld h,b
         ld l,c
         ld (kv),hl  ;k <- N
    dec bc
    ld a,c
    cpl
    ld c,a
    ld a,b
    cpl
    ld b,a
         ld de,2000
         ld hl,ra+2

lf0      ld (hl),e
         inc l
         ld (hl),d
         inc hl
         inc c
         jp nz,lf0

         inc b
         jp nz,lf0

         ld a,b
         ld (cv),a
         ld (cv+1),a
loop     ld hl,(kv)          ;i <-k
         add hl,hl        ;keeps 2*i
         ld b,h
         ld c,l
         push hl
         ld hl,0          ;d <- 0
         push hl
         push hl
         jp loop2

l4       add hl,de
         jp nc,lnc

         inc bc
lnc      ex de,hl
         pop hl
         ld a,l
         sub e
         ld l,a
         ld a,h
         sbc a,d
         ld h,a
         ex de,hl
         pop hl

         ld a,l
         sbc a,c
         ld l,a
         ld a,h
         sbc a,b
         ld h,a
         sra hl
         ld a,d
         rra
         ld d,a
         ld a,e
         rra
         ld e,a

         pop bc
         push bc
         push hl
         push de
loop2    ld hl,ra
         add hl,bc
         ld (m1+1),hl

         ld c,(hl)      ;r[i]
         inc l          ;r is at even addr
         ld b,(hl)
         ld h,high(m10000)
         ld l,c
         ld e,(hl)
         ld l,b
         ld a,(hl)
         ld l,c
         inc h
         add a,(hl)
         ld d,a
         ld l,b
         ld a,(hl)
         ld l,c
         inc h
         adc a,(hl)
         ld c,a
         ld l,b
         ld a,(hl)
         adc a,0
         ld b,a

         pop hl       ; d <- d + r[i]*10000
         add hl,de
         ex de,hl
         pop hl
         jp nc,noc

         inc hl
noc      add hl,bc

    pop bc
    dec bc     ;i <- i - 1
    dec c      ;bc is odd
    push bc
    ld a,c
    or b
         push hl
         push de
    push af
    inc c
         div32x16
m1       ld (0),hl      ;r[i] <- d%b, d <- d/b
    pop af
         jp nz,l4

         pop hl
         pop hl
         pop hl
if IO
         ld h,b
         ld l,c
         ld bc,10000
         call div32x16r
         ld a,(cv)
         ld c,a
         ld a,(cv+1)
         ld (cv),hl     ;c <- d%10000
         ld h,a
         ld l,c

         add hl,de   ;c + d/10000
         call PR0000
endif
         ld de,0
         di
         ld hl,(TTI)
         ex de,hl
         ld (TTI),hl
         ei
         ld hl,(time)
         add hl,de
         ld (time),hl
         jp  nc,kl1

         ld hl,(time+2)
         inc hl
         ld (time+2),hl
kl1
         ld hl,(kv)      ;k <- k - 14
         ld de,-14
         add hl,de
         ld a,h
         or l
         jp z,finish

         ld (kv),hl
         jp loop

finish   ld a,0c9h       ;RET
         ld (0f5ffh),a
         ret
         endp

PR0000  ld de,-1000
	CALL PR0
	ld de,-100
	CALL PR0
	ld de,-10
	CALL PR0
	ld A,L
PRD	add a,$30
        jp 4b44h      ;rst 20h

PR0	ld A,$FF
	ld B,H
	ld C,L
	inc A
	add HL,DE
	jp C,$-4

	ld H,B
	ld L,C
	Jp PRD

div32x16r proc
     local t,t0,t1,t2,t3
     call t
     ld bc,0
     ret
t
     DEC   BC
     LD    A, B
     CPL 
     LD    B, A
     LD    A, C
     CPL 
     LD    C, A
     call t0
t0
     call t1
t1
     call t2
t2
     call t3
t3
     div0
     RET
     endp

cv dw 0
kv dw 0
time dw 0,0

TINTR
     push hl
     ld hl,(TTI)
     inc hl
     ld (TTI),hl
     pop hl
     ret
TTI  dw 0

         org ($ + 255) and $ff00
include "../cpc6128/mul10000.s"
ra
  end start
