;for pasmo assembler with the 8085 preprocessor
;it calculates pi-number using the next C-algorithm
;https://crypto.stanford.edu/pbc/notes/pi/code.html

;#include <stdio.h>
;#define N 2800
;main() {
;   long r[N + 1], i, k, b, c;
;   c = 0;
;   for (i = 1; i <= N; i++)   ;it is the fixed line!, the original was (i = 0; i < N; ...
;      r[i] = 2000;
;   for (k = N; k > 0; k -= 14) {
;      d = 0;
;      i = k;
;      for(;;) {
;         d += r[i]*10000;
;         b = i*2 - 1;
;         r[i] = d%b;
;         d /= b;
;         i--;
;         if (i == 0) break;
;         d *= i;
;      }
;      printf("%.4d", (int)(c + d/10000));
;      c = d%10000;
;   }
;}

;the time of the calculation is quadratic, so if T is time to calculate N digits
;then 4*T is required to calculate 2*N digits
;main loop count is 7*(4+D)*D/16, D - number of digits

;ivagor supplied very valuable information
;the idea of fast 32/16 division for the 8080 was discovered by blackmirror
;litwr made the spigot for the Tandy TRS-80 model 100

DIGITS equ 100
N equ   DIGITS*7/2
SA equ $8d00 ;start address
IO equ 1
MINUS equ 0  ;0 - if dividers are positive, this is ok up to 4680 digits
DEBUG equ 0

include "8085-div.s"

         org SA-6
         dw SA
         dw ra - start
         dw SA

start    proc
         local lf0,loop,l4,loop2,m1
    ld hl,TINTR
    ld (0f600h),hl
    ld a,0c3h       ;JP
    ld (0f5ffh),a
    ld hl,0
    ld (time),hl
    ld (time+2),hl

         ld hl,N        ;fill r-array
         ld (kv),hl  ;k <- N
    dec hl
    ld a,l
    cpl
    ld c,a
    ld a,h
    cpl
    ld b,a
         ld de,2000
         ld hl,ra+2

lf0      ld (hl),e
         inc l
         ld (hl),d
         inc hl
         inc c
         jp nz,lf0

         inc b
         jp nz,lf0

         ld l,b
         ld h,b
         ld (cv),hl
loop     ld hl,(kv)          ;i <-k
         add hl,hl        ;keeps 2*i
         push hl
         ld bc,ra
         add hl,bc
         ld bc,0          ;d <- 0
         push bc
         push bc
         ld de,m1+1
         jp loop2

l4       add hl,de
         jp nc,$+4
         inc bc
         ex de,hl
svde     ld hl,0
         ld a,l
         sub e
         ld l,a
         ld a,h
         sbc a,d
         ld h,a
         ex de,hl
         pop hl
if 1
         jp nc,$+4
         dec hl
         sub hl,bc
else
         ld a,l
         sbc a,c
         ld l,a
         ld a,h
         sbc a,b
         ld h,a
endif
         sra hl
         ld a,d
         rra
         ld d,a
         ld a,e
         rra
         ld e,a
         push hl
         push de

if 1
         ld de,m1+1
         ld hl,(de)
         dec hl
         dec l
loop2    ld (de),hl
else
         ld hl,(m1+1)
         dec hl
         dec l
loop2    ld (m1+1),hl
endif
         ld d,(hl)      ;r[i]
         inc l          ;r is at even addr
         ld l,(hl)
         ld h,2+(high(m10000))
         ld b,(hl)
         dec h
         ld c,(hl)
         dec h
         ld a,(hl)
         ld l,d
         ld e,(hl)
         inc h
         add a,(hl)
         ld d,a
         inc h
         ld a,(hl)
         adc a,c
         ld c,a
         jp nc,$+4
         inc b
         pop hl       ; d <- d + r[i]*10000
         add hl,de
         ld (svde+1),hl
         ex de,hl
         pop hl
         jp nc,$+4
         inc hl
         add hl,bc
         pop bc
         dec bc     ;i <- i - 1
         dec c      ;bc is odd
         push bc
         ld a,b
         push hl
         push af
         inc c
         div32x16
m1       ld (0),hl      ;r[i] <- d%b, d <- d/b
         pop af
         jp nz,l4

         or a
         jp nz,l4

         pop hl
         pop hl
if IO
         ld h,b
         ld l,c
         ld bc,10000
         call div32x16r
         ld a,(cv)
         ld c,a
         ld a,(cv+1)
         ld (cv),hl     ;c <- d%10000
         ld h,a
         ld l,c

         add hl,de   ;c + d/10000
         call PR0000
endif
         ld de,0
         di
         ld hl,(TTI)
         ex de,hl
         ld (TTI),hl
         ei
         ld hl,(time)
         add hl,de
         ld (time),hl
         jp  nc,kl1

         ld hl,(time+2)
         inc hl
         ld (time+2),hl
kl1
         ld hl,(kv)      ;k <- k - 14
         ld de,-14
         add hl,de
         ld a,h
         or l
         jp z,finish

         ld (kv),hl
         jp loop

finish   ld a,0c9h       ;RET
         ld (0f5ffh),a
         ret
         endp

if DEBUG
bin2hex proc   ;prints hl
        local hexa,hex,l1,main
        push af
        call main
        pop af
        ret

main    push hl
        ld l,h
        call hexa
        pop hl
hexa    ld a,l   ;prints l
        rrca
        rrca
        rrca
        rrca
        and 15
        call hex
        ld a,l
        and 0fh
hex:    add a,'0'
        cp '9'+1
        jp c,l1

        add a,'A'-'0'-10
l1:     jp 4b44h
        endp

showregs proc   ;AF HL DE BC
        push hl
        push hl
        push af
        pop hl
        call bin2hex
        ld a,32
        rst 20h
        pop hl
        call bin2hex
        ld a,32
        rst 20h
        ex de,hl
        call bin2hex
        ex de,hl
        ld a,32
        rst 20h
        ld h,b
        ld l,c
        call bin2hex
        pop hl
        ld a,13
        rst 20h
        ld a,10
        jp 4b44h
        endp
endif

TINTR
     push hl
     ld hl,(TTI)
     inc hl
     ld (TTI),hl
     pop hl
     ret
TTI  dw 0

         org ($ + 255) and $ff00
include "../cpc6128/mul10000.s"

cv dw 0
kv dw 0
time dw 0,0  ;@time@

PR0000  ld de,-1000
	CALL PR0
	ld de,-100
	CALL PR0
	ld de,-10
	CALL PR0
	ld A,L
PRD	add a,$30
        jp 4b44h      ;rst 20h

PR0	ld A,$FF
	ld B,H
	ld C,L
	inc A
	add HL,DE
	jp C,$-4

	ld H,B
	ld L,C
	Jp PRD

div32x16r proc  ;00de = hlde/bc, hl = hlde%bc
     local t,t0,t1,t2,t3,t4,l1,l2
     call t
     ld bc,0
     ret
t
     DEC   BC
     LD    A, B
     CPL
     LD    B, A
     LD    A, C
     CPL
     LD    C, A
     call t0
t0   call t1
t1   call t2
t2   call t3
t3   ex de,hl
     add hl,hl
     ex de,hl
     jp c,l1

     ADD   HL, HL
l2   jp c,t4

     LD    A,L
     ADD   A,C
     LD    A,H
     ADC   A,B
     ret    NC
t4
     ADD   HL,BC
     inc e
     RET
l1   add hl,hl
     inc l
     jp l2
     endp

     org ($ + 1) and $fffe
ra    equ $  ;@ra@
  end start
